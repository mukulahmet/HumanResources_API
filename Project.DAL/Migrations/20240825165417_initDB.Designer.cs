// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.Context;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240825165417_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.Models.Concrete.Advance", b =>
                {
                    b.Property<int>("AdvanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvanceID"));

                    b.Property<int>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("AdvanceID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Advances");
                });

            modelBuilder.Entity("Project.Models.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "c83fd66d-9647-42be-b514-8e67981a525b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c473b1ca-d97d-4368-b6dc-21870951ab3c",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "b2abfa45-82c1-4bcd-bffa-9c05932fc64c",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Project.Models.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("JobID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Uskudar",
                            BirthDate = new DateTime(2024, 8, 25, 19, 54, 16, 35, DateTimeKind.Local).AddTicks(557),
                            ConcurrencyStamp = "627b19d2-75f0-4210-84ab-677f9fadcc29",
                            Email = "Bora@gmail.com",
                            EmailConfirmed = false,
                            ImagePath = "/images/default.jpg",
                            LastName = "Yildirim",
                            LockoutEnabled = false,
                            Name = "Bora",
                            NormalizedEmail = "BORA@GMAIL.COM",
                            NormalizedUserName = "BORA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMZPZftJnhUnIfjPJsy/xrYoTNUjK9EQdY46HGp3Iphwp1+JrZfzhUArOxA16Ii2eQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfc671b1-31a0-4ce0-91e3-cb8d303e133d",
                            TC = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "Bora@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ActivityStatus = 1,
                            Address = "Antalya",
                            BirthDate = new DateTime(2024, 8, 25, 19, 54, 16, 242, DateTimeKind.Local).AddTicks(2161),
                            CompanyID = 1,
                            ConcurrencyStamp = "e5d27431-19b6-4464-8391-85d9dc1783fd",
                            DepartmentID = 1,
                            Email = "Mahmut@bilgeadam.com",
                            EmailConfirmed = false,
                            JobID = 1,
                            LastName = "Taylan",
                            LockoutEnabled = false,
                            Name = "Mahmut",
                            NormalizedEmail = "MAHMUT@BİLGEADAM.COM",
                            NormalizedUserName = "MAHMUT@BİLGEADAM.COM",
                            PhoneNumberConfirmed = false,
                            Salary = 75000m,
                            SecurityStamp = "3a1528ab-5093-40f8-aba1-c0d370e55e93",
                            TC = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "Mahmut@bilgeadam.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ActivityStatus = 1,
                            Address = "Kadikoy",
                            BirthDate = new DateTime(2024, 8, 25, 19, 54, 16, 242, DateTimeKind.Local).AddTicks(2242),
                            CompanyID = 1,
                            ConcurrencyStamp = "8f3329ee-4e7e-4f86-96f0-f4e189513c55",
                            DepartmentID = 1,
                            Email = "Eylem@bilgeadam.com",
                            EmailConfirmed = false,
                            JobID = 2,
                            LastName = "Eryılmaz",
                            LockoutEnabled = false,
                            Name = "Eylem",
                            NormalizedEmail = "EYLEM@BİLGEADAM.COM",
                            NormalizedUserName = "EYLEM@BİLGEADAM.COM",
                            PhoneNumberConfirmed = false,
                            Salary = 10000m,
                            SecurityStamp = "038b06c1-5286-4a13-babf-6f3a97699de9",
                            TC = "11111111111",
                            TwoFactorEnabled = false,
                            UserName = "Eylem@bilgeadam.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ActivityStatus = 1,
                            Address = "Ankara",
                            BirthDate = new DateTime(2024, 8, 25, 19, 54, 16, 242, DateTimeKind.Local).AddTicks(2267),
                            CompanyID = 1,
                            ConcurrencyStamp = "4b82c95e-edce-4fd9-abcc-00a56b2d128d",
                            DepartmentID = 1,
                            Email = "Ahmet@bilgeadam.com",
                            EmailConfirmed = false,
                            JobID = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            Name = "Ahmet",
                            NormalizedEmail = "AHMET@BILGEADAM.COM",
                            NormalizedUserName = "AHMET@BILGEADAM.COM",
                            PhoneNumberConfirmed = false,
                            Salary = 10000m,
                            SecurityStamp = "caee71ea-99a8-4f06-9d47-ae5b20b0beca",
                            TC = "22222222222",
                            TwoFactorEnabled = false,
                            UserName = "Ahmet@bilgeadam.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ActivityStatus = 1,
                            Address = "Edirne",
                            BirthDate = new DateTime(2024, 8, 25, 19, 54, 16, 242, DateTimeKind.Local).AddTicks(2418),
                            CompanyID = 1,
                            ConcurrencyStamp = "3e6a53ae-f681-408a-97a6-6808d4f24080",
                            DepartmentID = 1,
                            Email = "Mukul@bilgeadam.com",
                            EmailConfirmed = false,
                            JobID = 2,
                            LastName = "Bekfilavioglu",
                            LockoutEnabled = false,
                            Name = "Mukul",
                            NormalizedEmail = "MUKUL@BILGEADAM.COM",
                            NormalizedUserName = "MUKUL@BILGEADAM.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff89ec0d-fdb2-49a0-8faf-2cb4347ea8aa",
                            TC = "33333333333",
                            TwoFactorEnabled = false,
                            UserName = "Mukul@bilgeadam.com"
                        });
                });

            modelBuilder.Entity("Project.Models.Concrete.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ContractExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyID = 1,
                            Address = "İstanbul",
                            CompanyName = "myob",
                            CompanyTitle = "Ltd.sti",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "myob@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "\\LandingPage\\assets\\img\\clients\\client-1.png",
                            MersisNo = "01111111111111115",
                            PhoneNumber = "0111 222 3344",
                            Status = 1,
                            TaxNo = "9111111111",
                            TaxOffice = "İstanbul Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 2,
                            Address = "Ankara",
                            CompanyName = "Belimo",
                            CompanyTitle = "A.Ş.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "belimo@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2005, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "/LandingPage/assets/img/clients/client-2.png",
                            MersisNo = "02222222222222226",
                            PhoneNumber = "0222 333 4455",
                            Status = 1,
                            TaxNo = "9222222222",
                            TaxOffice = "Ankara Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 3,
                            Address = "İzmir",
                            CompanyName = "LifeGroups",
                            CompanyTitle = "Ltd. Şti.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lifegroups@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2010, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "/LandingPage/assets/img/clients/client-3.png",
                            MersisNo = "03333333333333337",
                            PhoneNumber = "0333 444 5566",
                            Status = 1,
                            TaxNo = "9333333333",
                            TaxOffice = "İzmir Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 4,
                            Address = "İzmir",
                            CompanyName = "grabyo",
                            CompanyTitle = "Ltd. Şti.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grabyo@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2010, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "/LandingPage/assets/img/clients/client-4.png",
                            MersisNo = "03333333333333337",
                            PhoneNumber = "0333 444 5566",
                            Status = 1,
                            TaxNo = "9333333333",
                            TaxOffice = "İzmir Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 5,
                            Address = "İzmir",
                            CompanyName = "citrus",
                            CompanyTitle = "Ltd. Şti.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "citrus@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2010, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "\\LandingPage\\assets\\img\\clients\\client-5.png",
                            MersisNo = "03333333333333337",
                            PhoneNumber = "0333 444 5566",
                            Status = 1,
                            TaxNo = "9333333333",
                            TaxOffice = "İzmir Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 6,
                            Address = "İzmir",
                            CompanyName = "Trustly",
                            CompanyTitle = "Ltd. Şti.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trustly@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2010, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "/LandingPage/assets/img/clients/client-6.png",
                            MersisNo = "03333333333333337",
                            PhoneNumber = "0333 444 5566",
                            Status = 1,
                            TaxNo = "9333333333",
                            TaxOffice = "İzmir Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 7,
                            Address = "İzmir",
                            CompanyName = "oldendoff",
                            CompanyTitle = "Ltd. Şti.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "oldendoff@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2010, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "/LandingPage/assets/img/clients/client-7.png",
                            MersisNo = "03333333333333337",
                            PhoneNumber = "0333 444 5566",
                            Status = 1,
                            TaxNo = "9333333333",
                            TaxOffice = "İzmir Vergi Dairesi"
                        },
                        new
                        {
                            CompanyID = 8,
                            Address = "İzmir",
                            CompanyName = "Lilly",
                            CompanyTitle = "Ltd. Şti.",
                            ContractExpirationDate = new DateTime(2028, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractStartDate = new DateTime(2018, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lilly@support.com",
                            EmployeeCount = 15,
                            FoundationDate = new DateTime(2010, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogoPath = "/LandingPage/assets/img/clients/client-8.png",
                            MersisNo = "03333333333333337",
                            PhoneNumber = "0333 444 5566",
                            Status = 1,
                            TaxNo = "9333333333",
                            TaxOffice = "İzmir Vergi Dairesi"
                        });
                });

            modelBuilder.Entity("Project.Models.Concrete.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentName = "Management"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentName = "Research And Development"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentName = "Programming"
                        });
                });

            modelBuilder.Entity("Project.Models.Concrete.DepartmentCompany", b =>
                {
                    b.Property<int>("DepartmentCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentCompanyID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("DepartmentCompanyID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("DepartmentCompany");

                    b.HasData(
                        new
                        {
                            DepartmentCompanyID = 1,
                            CompanyID = 1,
                            DepartmentID = 1
                        },
                        new
                        {
                            DepartmentCompanyID = 2,
                            CompanyID = 2,
                            DepartmentID = 1
                        },
                        new
                        {
                            DepartmentCompanyID = 3,
                            CompanyID = 3,
                            DepartmentID = 1
                        },
                        new
                        {
                            DepartmentCompanyID = 4,
                            CompanyID = 1,
                            DepartmentID = 2
                        },
                        new
                        {
                            DepartmentCompanyID = 5,
                            CompanyID = 2,
                            DepartmentID = 2
                        },
                        new
                        {
                            DepartmentCompanyID = 6,
                            CompanyID = 3,
                            DepartmentID = 2
                        },
                        new
                        {
                            DepartmentCompanyID = 7,
                            CompanyID = 1,
                            DepartmentID = 3
                        },
                        new
                        {
                            DepartmentCompanyID = 8,
                            CompanyID = 2,
                            DepartmentID = 3
                        },
                        new
                        {
                            DepartmentCompanyID = 9,
                            CompanyID = 3,
                            DepartmentID = 3
                        });
                });

            modelBuilder.Entity("Project.Models.Concrete.Expense", b =>
                {
                    b.Property<int>("ExpenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ExpenseID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Project.Models.Concrete.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobID");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobID = 1,
                            JobName = "Director"
                        },
                        new
                        {
                            JobID = 2,
                            JobName = "Developer"
                        },
                        new
                        {
                            JobID = 3,
                            JobName = "Data Analyst"
                        },
                        new
                        {
                            JobID = 4,
                            JobName = "Data Scientist"
                        },
                        new
                        {
                            JobID = 5,
                            JobName = "Database Expert"
                        },
                        new
                        {
                            JobID = 6,
                            JobName = "AI Expert"
                        },
                        new
                        {
                            JobID = 7,
                            JobName = "Human Resources"
                        },
                        new
                        {
                            JobID = 8,
                            JobName = "Technical Support"
                        });
                });

            modelBuilder.Entity("Project.Models.Concrete.Leave", b =>
                {
                    b.Property<int>("LeaveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveID"));

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("LeaveID");

                    b.HasIndex("AppUserID");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.Concrete.Advance", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppUser", "AppUser")
                        .WithMany("Advances")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Models.Concrete.AppUser", b =>
                {
                    b.HasOne("Project.Models.Concrete.Company", "Company")
                        .WithMany("AppUsers")
                        .HasForeignKey("CompanyID");

                    b.HasOne("Project.Models.Concrete.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Project.Models.Concrete.Job", "Job")
                        .WithMany("AppUsers")
                        .HasForeignKey("JobID");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Project.Models.Concrete.DepartmentCompany", b =>
                {
                    b.HasOne("Project.Models.Concrete.Company", "Company")
                        .WithMany("CompanyDepartments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Concrete.Department", "Department")
                        .WithMany("DepartmentCompanies")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Project.Models.Concrete.Expense", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppUser", "AppUser")
                        .WithMany("Expenses")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Models.Concrete.Leave", b =>
                {
                    b.HasOne("Project.Models.Concrete.AppUser", "AppUser")
                        .WithMany("Leaves")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Models.Concrete.AppUser", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("Project.Models.Concrete.Company", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("CompanyDepartments");
                });

            modelBuilder.Entity("Project.Models.Concrete.Department", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("DepartmentCompanies");
                });

            modelBuilder.Entity("Project.Models.Concrete.Job", b =>
                {
                    b.Navigation("AppUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
